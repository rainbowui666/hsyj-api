{
    "version": 3,
    "sources": [
        "../../../src/api/controller/scenery.js"
    ],
    "names": [
        "Base",
        "require",
        "module",
        "exports",
        "indexAction",
        "page",
        "get",
        "size",
        "scenerytitle",
        "model",
        "_pk",
        "data",
        "where",
        "shstate",
        "order",
        "countSelect",
        "sceneryTitle",
        "arrdata",
        "item",
        "pics",
        "getPicsbyid",
        "sceneryID",
        "getstate",
        "push",
        "success",
        "getSceneryListBySchoolidsAction",
        "schoolids",
        "schoolid",
        "select",
        "getscenerydetailAction",
        "id",
        "find",
        "think",
        "isEmpty",
        "discussList",
        "getDiscussById",
        "detailAction",
        "scenery",
        "getScenerybyid"
    ],
    "mappings": "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",
    "file": "../../../src/api/controller/scenery.js",
    "sourcesContent": [
        "const Base = require('./base.js');\n\nmodule.exports = class extends Base {\n    async indexAction() {\n        const page = this.get('pageindex') || 1;\n        const size = this.get('pagesize') || 10;\n        const scenerytitle = this.get('scenerytitle') || '';\n\n        const model = this.model('scenery');\n        model._pk = 'sceneryID';\n\n        var data;\n        if (scenerytitle == '') {\n            data = await model.where({shstate:0}).page(page, size).order('sceneryID desc').countSelect();\n        } else {\n            data = await model.where({sceneryTitle: ['like', `%${scenerytitle}%`], shstate:0}).order('sceneryID desc').page(page, size).countSelect();\n        }\n        const arrdata = [];\n        for (const item of data.data) {\n            item.pics = await this.model('scenery').getPicsbyid(item.sceneryID);\n            item.shstate = await this.model('scenery').getstate(item.sceneryID);\n            arrdata.push(item);\n        }\n        data.data = arrdata;\n        return this.success(data)\n    }\n\n    async getSceneryListBySchoolidsAction() {\n        const schoolids = this.get('schoolids');\n        const data = await this.model('scenery').where({schoolid:['IN', schoolids]}).select();\n        return this.success(data)\n    }\n\n    async getscenerydetailAction() {\n        const id = this.get('id');\n        const model = this.model('scenery');\n        model._pk = 'sceneryID';\n        const data = await model.where({sceneryID: id}).find();\n        if (!think.isEmpty(data)) {\n            data.pics = await this.model('scenery').getPicsbyid(data.sceneryID);\n            data.shstate = await this.model('scenery').getstate(data.sceneryID);\n            data.discussList = await this.model('discuss').getDiscussById(id,0);\n        }\n        return this.success(data);\n    }\n\n    \n\n    async detailAction() {\n        const id = this.get('id');\n        const model = this.model('scenery');\n        const data = await model.where({sceneryID: id}).find();\n\n        const arrdata = [];\n        // for (const item of data.data) {\n            data.scenery = await this.model('school').getScenerybyid(data.sceneryID);\n        //     // item.shstate = await this.model('school').getstate(item.schoolID);\n        //     arrdata.push(item);\n        // }\n        // data.data = arrdata;\n        return this.success(data)\n    }\n}"
    ]
}