{
    "version": 3,
    "sources": [
        "../../../src/api/controller/auth.js"
    ],
    "names": [
        "Base",
        "require",
        "svgCaptcha",
        "cookieParase",
        "http",
        "module",
        "exports",
        "loginAction",
        "code",
        "post",
        "fullUserInfo",
        "tel",
        "schoolid",
        "studentname",
        "stuNo",
        "newUserInfo",
        "model",
        "where",
        "studentName",
        "find",
        "TokenSerivce",
        "service",
        "sessionKey",
        "create",
        "user_id",
        "studentID",
        "think",
        "isEmpty",
        "fail",
        "success",
        "token",
        "userInfo",
        "logoutAction",
        "createCaptchaAction",
        "captcha",
        "inverse",
        "fontSize",
        "noise",
        "width",
        "height",
        "ctx",
        "req",
        "session",
        "text",
        "toLowerCase",
        "console",
        "log",
        "cache",
        "type",
        "res",
        "write",
        "String",
        "data",
        "end",
        "adminLoginAction",
        "captchacode",
        "authcaptha",
        "username",
        "pwd",
        "userName",
        "id",
        "sysUserID",
        "userData",
        "query"
    ],
    "mappings": "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",
    "file": "../../../src/api/controller/auth.js",
    "sourcesContent": [
        "const Base = require('./base.js');\nvar svgCaptcha = require('svg-captcha');\nconst cookieParase = require('cookie-parser');\nvar http = require('http');\n\nmodule.exports = class extends Base {\n  async loginAction() {\n    const code = this.post('code');\n    const fullUserInfo = this.post('userInfo');\n    const tel = this.post('tel');\n    const schoolid = this.post('schoolid');\n    const studentname = this.post('studentname');\n    const stuNo = this.post('stuno');\n\n    // 解释用户数据\n    // const userInfo = await this.service('weixin', 'api').login(code, fullUserInfo);\n    // if (think.isEmpty(userInfo)) {\n    //   return this.fail('登录失败');\n    // }\n\n    // 根据openid查找用户是否已经注册\n    // let userId = await this.model('student').where({ wxopenid: userInfo.openId }).getField('studentId', true);\n    // if (think.isEmpty(userId)) {\n      // 注册\n    //   userId = await this.model('user').add({\n    //     username: '微信用户' + think.uuid(6),\n    //     pwd: '',\n    //     tel: '',\n    //     wxopenid: userInfo.openId,\n    //     photo: userInfo.avatarUrl || '',\n    //     sex: userInfo.gender || 1, // 性别 0：未知、1：男、2：女\n    //     nickname: userInfo.nickName\n    //   });\n    // }\n\n    // 查询用户信息\n    const newUserInfo = await this.model('student').where({ tel:tel, schoolid:schoolid,studentName:studentname, stuNo:stuNo }).find();\n\n    const TokenSerivce = this.service('token', 'api');\n    const sessionKey = await TokenSerivce.create({ user_id: newUserInfo.studentID });\n\n    if (think.isEmpty(newUserInfo) || think.isEmpty(sessionKey)) {\n      return this.fail('登录失败');\n    }\n\n    return this.success({ token: sessionKey, userInfo: newUserInfo });\n  }\n\n  async logoutAction() {\n    return this.success();\n  }\n\n  async createCaptchaAction() {\n    var captcha = svgCaptcha.create({  \n      // 翻转颜色  \n      inverse: false,  \n      // 字体大小  \n      fontSize: 36,  \n      // 噪声线条数  \n      noise: 2,  \n      // 宽度  \n      width: 80,  \n      // 高度  \n      height: 30,  \n    });  \n    // 保存到session,忽略大小写  \n    this.ctx.req.session = captcha.text.toLowerCase(); \n    console.log(this.ctx.req.session); //0xtg 生成的验证码\n    //保存到cookie 方便前端调用验证\n    this.cache('captcha', this.ctx.req.session); \n    this.ctx.type = ('image/svg+xml');\n    this.ctx.res.write(String(captcha.data));\n    this.ctx.res.end();\n  }\n  async adminLoginAction() {\n    const captchacode = this.post('captchacode');\n    const authcaptha = await this.cache('captcha');\n    if (think.isEmpty(captchacode)) {\n      return this.fail('验证码为空')\n    }\n\n    if (captchacode != authcaptha) {\n      console.log('fail', captchacode, authcaptha)\n      return this.fail('验证码错误')\n    }\n\n    const username = this.post('username');\n    const pwd = this.post('pwd');\n    const data = await this.model('User').where({userName:username, pwd:pwd}).find();\n    if (think.isEmpty(data)) {\n      return this.fail(403, '账号或密码错误');\n    } \n      const id = data.sysUserID;\n\n      const model = this.model('User');\n      // let userData = await model.query(\"select u.*,ur.roleid,r.roleName,rp.permissionid,p.permissionName,ps.schoolid from culture_user u inner join culture_user_role ur on u.sysUserID=ur.sysuserid inner join culture_role r on r.roleID=ur.roleid inner join culture_role_permission rp on rp.roleid=r.roleID inner join culture_permission p on p.permissionID=rp.permissionid inner join culture_permission_school ps on ps.permissionid=p.permissionID where u.sysuserid=\"+id);\n      let userData = await model.query(\"select u.*,s.schoolName from culture_User u left join culture_school s on u.schoolid=s.schoolID where u.sysuserid=\"+id);\n\n      const TokenSerivce = this.service('token', 'api');\n      const sessionKey = await TokenSerivce.create({ user_id: userData.sysUserID });\n\n      if (think.isEmpty(userData) || think.isEmpty(sessionKey)) {\n        return this.fail('登录失败');\n      }\n      userData[0].token = sessionKey;\n      this.cache('userinfo', userData)\n     // console.log(userData)\n    // return this.success({ token: sessionKey, userInfo: newUserInfo });\n\n    return this.success({userData})\n  }\n};\n"
    ]
}