{
    "version": 3,
    "sources": [
        "../../../src/api/controller/group.js"
    ],
    "names": [
        "Base",
        "require",
        "_",
        "module",
        "exports",
        "utf16toEntities",
        "str",
        "patt",
        "replace",
        "char",
        "H",
        "L",
        "code",
        "length",
        "charCodeAt",
        "addEditAction",
        "id",
        "post",
        "groupname",
        "studentid",
        "think",
        "isEmpty",
        "fail",
        "groupstudnetData",
        "model",
        "where",
        "activityid",
        "select",
        "dataExsts",
        "groupName",
        "param",
        "insertid",
        "add",
        "para2",
        "groupid",
        "insertidgr",
        "success",
        "readyScanAction",
        "get",
        "cache",
        "showGroupAction",
        "joinGroupAction",
        "para",
        "hasCreateGroup",
        "hasjoinData",
        "field",
        "activityID",
        "getField",
        "scanstudnetid",
        "actData",
        "find",
        "groupnum",
        "parseInt",
        "groupNum",
        "groupcount",
        "uniq",
        "console",
        "log",
        "groupdate",
        "hasbaomin",
        "studentID",
        "para3",
        "shstate",
        "insertid2",
        "msg",
        "display",
        "showQrAction",
        "url",
        "qrService",
        "service",
        "type",
        "body",
        "getQrByUrl"
    ],
    "mappings": "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",
    "file": "../../../src/api/controller/group.js",
    "sourcesContent": [
        "const Base = require('./base.js');\nconst _ = require('lodash');\n\nmodule.exports = class extends Base {\n    utf16toEntities(str) {\n        var patt=/[\\ud800-\\udbff][\\udc00-\\udfff]/g;\n        // 检测utf16字符正则\n        str = str.replace(patt, function(char){\n            var H, L, code;\n            if (char.length===2) {\n                H = char.charCodeAt(0);\n                // 取出高位\n                L = char.charCodeAt(1);\n                // 取出低位\n                code = (H - 0xD800) * 0x400 + 0x10000 + L - 0xDC00;\n                // 转换算法\n                return \"&#\" + code + \";\";\n            } else {\n                return char;\n            }\n        });\n        return str;\n    }\n\n    async addEditAction() {\n        const id = this.post('id');\n        const groupname = this.utf16toEntities(this.post('groupname'));\n        const studentid = this.post('studentid')\n\n        if (think.isEmpty(groupname)) {\n            return this.fail('团队名称必填')\n        }\n\n        // 有没有加入团队\n        const groupstudnetData = await this.model('student_group').where({activityid: id, studentid: studentid}).select();\n        if (!think.isEmpty(groupstudnetData)) {\n            // console.log('groupstudnetData', groupstudnetData)\n            // groupstudnetData.groupname = await this.model('group').field('groupName').where({groupID: groupstudnetData[0].groupid}).find()\n            return this.fail('你已加入过团队,不能再创建团队')\n        }\n        \n        const dataExsts = await this.model('group').where({groupName: groupname, activityid:id}).select();\n        if (dataExsts && dataExsts.length > 0) {\n            return this.fail('团队名称被抢注,请更换')\n        }\n        let param = {\n            activityid:id,\n            groupName:groupname,\n            studentid: studentid\n        }\n\n        const insertid = await this.model('group').add(param);\n        if (!think.isEmpty(insertid)) {\n            let para2 = {\n                groupid:insertid,studentid:studentid,activityid:id\n            }\n            let insertidgr = await this.model('student_group').add(para2);\n        }\n        return this.success('添加成功')\n    }\n\n    async readyScanAction() {\n        const studentid = this.get('studentid');\n        this.cache('scan'+studentid, studentid);\n        // console.log('readyScanAction-------------------')\n        return this.success({'scan': studentid})\n    }\n\n    async showGroupAction() {\n        const groupid = this.get('groupid');\n        return this.success({groupid: groupid})\n    }\n\n    async joinGroupAction() {\n        const groupid = this.get('groupid');\n        const studentid = this.get('studentid');\n        const activityid = this.get('activityid');\n        let para = {\n            groupid,studentid,activityid\n        }\n\n        const hasCreateGroup = await this.model('group').where({groupid: groupid, studentid:studentid, activityid: activityid}).select();\n        if (!think.isEmpty(hasCreateGroup)) {\n            return this.fail('你已创建团队,不能再加入团队')\n        }\n        const hasjoinData = await this.model('student_group').field('studentid').where({activityID: activityid, studentid: studentid}).getField('studentid');\n        if (!think.isEmpty(hasjoinData)) {\n            return this.fail('你已加过团队,不能再加入团队')\n        }\n\n        const scanstudnetid = await this.cache('scan'+studentid);\n        // console.log('joinGroup.scanstudnetid-----', scanstudnetid, groupid,studentid,activityid)\n        if (!think.isEmpty(scanstudnetid)) {  \n            this.cache('scan'+studentid, null);\n                  \n            const actData = await this.model('activity').field(['activityID','groupNum']).where({activityID: activityid}).find();\n            let groupnum = 0\n            if (!think.isEmpty(actData)) {\n                groupnum = parseInt(actData.groupNum);\n            }\n\n            let groupcount = await this.model('student_group').field('studentid').where({activityID: activityid, groupid: groupid}).getField('studentid');\n            groupcount = _.uniq(groupcount);\n            console.log('groupcount=====', groupcount, groupnum)\n            if (groupcount.length >= groupnum) {\n                return this.fail('加入失败, 超过团体活动最大限制人数')\n            } else {\n                console.log('joingroup------',groupid,studentid,activityid)\n                // console.log('success group----')\n                let insertid = await this.model('student_group').add(para);\n                const groupdate = await this.model('group').where({groupid: groupid}).find();\n\n                // 报名\n                let hasbaomin = await this.model('student_activity').where({activityid:activityid,studentID:studentid}).find();\n                if (think.isEmpty(hasbaomin)) {\n                    let para3 = {\n                        studentID:studentid,activityid:activityid,shstate:1\n                    }\n                    let insertid2 = await this.model('student_activity').add(para3);\n                }\n                return this.success({msg:'扫码加入成功',groupName: groupdate.groupName});\n            }\n        } else {\n            return this.display('pages/groupSuccess')\n        }\n    }\n\n    async showQrAction() {\n        const url = this.get('url');\n        const studentid = this.get('studentid');\n        const activityid = this.get('activityid');\n\n        \n        console.log('showqr', url, studentid, activityid)\n        \n            \n            const qrService = this.service('qr', 'api');\n            this.type = 'image/svg+xml';\n            this.body = qrService.getQrByUrl(url+'&studentid='+studentid+'&activityid='+activityid);\n        \n    }\n}"
    ]
}