{
    "version": 3,
    "sources": [
        "../../../src/api/controller/group.js"
    ],
    "names": [
        "Base",
        "require",
        "_",
        "module",
        "exports",
        "addEditAction",
        "id",
        "post",
        "groupname",
        "studentid",
        "think",
        "isEmpty",
        "fail",
        "dataExsts",
        "model",
        "where",
        "groupName",
        "select",
        "data",
        "length",
        "param",
        "activityid",
        "insertid",
        "add",
        "para2",
        "groupid",
        "insertidgr",
        "success",
        "readyScanAction",
        "get",
        "cache",
        "console",
        "log",
        "showGroupAction",
        "joinGroupAction",
        "para",
        "scanstudnetid",
        "actData",
        "field",
        "activityID",
        "find",
        "groupnum",
        "parseInt",
        "groupNum",
        "groupcount",
        "getField",
        "groupcounts",
        "uniq",
        "groupdate",
        "msg",
        "display",
        "showQrAction",
        "url",
        "qrService",
        "service",
        "type",
        "body",
        "getQrByUrl"
    ],
    "mappings": "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",
    "file": "../../../src/api/controller/group.js",
    "sourcesContent": [
        "const Base = require('./base.js');\nconst _ = require('lodash');\n\nmodule.exports = class extends Base {\n    async addEditAction() {\n        const id = this.post('id');\n        const groupname = this.post('groupname');\n        const studentid = this.post('studentid')\n\n        if (think.isEmpty(groupname)) {\n            return this.fail('团队名称必填')\n        }\n        const dataExsts = await this.model('group').where({groupName: groupname}).select();\n        if (dataExsts && dataExsts.data && dataExsts.data.length > 0) {\n            return this.fail('团队名称重复,添加失败')\n        }\n        let param = {\n            activityid:id,\n            groupName:groupname,\n            studentid: studentid\n        }\n\n        const insertid = await this.model('group').add(param);\n        if (!think.isEmpty(insertid)) {\n            let para2 = {\n                groupid:insertid,studentid:studentid,activityid:id\n            }\n            let insertidgr = await this.model('student_group').add(para2);\n        }\n        return this.success('添加成功')\n    }\n\n    async readyScanAction() {\n        const studentid = this.get('studentid');\n        this.cache('scan'+studentid, studentid);\n        console.log('readyScanAction-------------------')\n        return this.success({'scan': studentid})\n    }\n\n    async showGroupAction() {\n        const groupid = this.get('groupid');\n        return this.success({groupid: groupid})\n    }\n\n    async joinGroupAction() {\n        const groupid = this.get('groupid');\n        const studentid = this.get('studentid');\n        const activityid = this.get('activityid');\n        let para = {\n            groupid,studentid,activityid\n        }\n\n        const scanstudnetid = await this.cache('scan'+studentid);\n        console.log('scanstudnetid-----', scanstudnetid, groupid,studentid,activityid)\n        if (!think.isEmpty(scanstudnetid)) {  \n            this.cache('scan'+studentid, null);\n                  \n            const actData = await this.model('activity').field(['activityID','groupNum']).where({activityID: activityid}).find();\n            let groupnum = 0\n            if (!think.isEmpty(actData)) {\n                groupnum = parseInt(actData.groupNum);\n            }\n\n            let groupcount = await this.model('student_group').field('studentid').where({activityID: activityid}).getField('studentid');\n            groupcounts = _.uniq(groupcounts);\n            if (groupcount >= groupnum) {\n                return this.fail('加入失败, 超过团体活动最大限制人数')\n            } else {\n                console.log('joingroup------',groupid,studentid,activityid)\n                // console.log('success group----')\n                let insertid = await this.model('student_group').add(para);\n                const groupdate = await this.model('group').where({groupid: groupid}).find();\n                return this.success({msg:'扫码加入成功',groupName: groupdate.groupName});\n            }\n        } else {\n            return this.display('pages/groupSuccess')\n        }\n    }\n\n    async showQrAction() {\n        const url = this.get('url');\n        const studentid = this.get('studentid');\n        const activityid = this.get('activityid');\n\n        \n        console.log('showqr', url, studentid, activityid)\n        \n            \n            const qrService = this.service('qr', 'api');\n            this.type = 'image/svg+xml';\n            this.body = qrService.getQrByUrl(url+'&studentid='+studentid+'&activityid='+activityid);\n        \n    }\n}"
    ]
}