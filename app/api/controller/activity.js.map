{
    "version": 3,
    "sources": [
        "../../../src/api/controller/activity.js"
    ],
    "names": [
        "Base",
        "require",
        "_",
        "fs",
        "module",
        "exports",
        "frontListAction",
        "page",
        "get",
        "size",
        "studentid",
        "model",
        "_pk",
        "endDate",
        "Date",
        "date",
        "getFullYear",
        "getMonth",
        "getDate",
        "data",
        "where",
        "shstate",
        "countSelect",
        "arrdata",
        "item",
        "pics",
        "getPicsbyid",
        "activityID",
        "console",
        "log",
        "Number",
        "startDate",
        "status",
        "joindate",
        "getStudentIsJoinActivity",
        "length",
        "hasjoin",
        "needSchoolRangName",
        "getSchoolNameByIds",
        "needSchoolRang",
        "getstate",
        "push",
        "success",
        "getactivitydetailAction",
        "id",
        "find",
        "think",
        "isEmpty",
        "getactivitydetailForGroupAction",
        "group",
        "activityid",
        "select",
        "getActivityDiscussListAction",
        "discussList",
        "getDiscussById",
        "getActivitySceneryListAction",
        "pageindex",
        "pagesize",
        "idcondition",
        "start",
        "query",
        "counta",
        "pagecount",
        "Math",
        "ceil",
        "t",
        "arrScen",
        "arrSchool",
        "sceneryid",
        "schoolid",
        "complateSceneryNum",
        "count",
        "complateSchoolNum",
        "uniq",
        "totalScenery",
        "totalSchool",
        "listAction",
        "userinfo",
        "cache",
        "usertype",
        "createbyuserid",
        "sysUserID",
        "sceneryCount",
        "questionCount",
        "list2Action",
        "list",
        "field",
        "alias",
        "join",
        "table",
        "as",
        "on",
        "order",
        "addEdit1Action",
        "activityName",
        "post",
        "sponsor",
        "meetingPlace",
        "secondSponsor",
        "shdesc",
        "startAddress",
        "needSchoolPass",
        "needSceneryPass",
        "settingStart",
        "startSceneryid",
        "settingEnd",
        "endSceneryid",
        "isGroup",
        "groupNum",
        "param",
        "insertid",
        "add",
        "json",
        "targetid",
        "delete",
        "update",
        "addEdit2Action",
        "questiontitle",
        "questiontype",
        "answera",
        "answerb",
        "answerc",
        "answerd",
        "rightanswer",
        "questionData",
        "questionTitle",
        "questionType",
        "answerA",
        "answerB",
        "answerC",
        "answerD",
        "rightAnswer",
        "questId",
        "questionid",
        "questionID",
        "deleteAction",
        "delete2Action"
    ],
    "mappings": "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",
    "file": "../../../src/api/controller/activity.js",
    "sourcesContent": [
        "const Base = require('./base.js');\nconst _ = require('lodash');\nconst fs = require('fs');\n\nmodule.exports = class extends Base {\n    async frontListAction() {\n        const page = this.get('page') || 1;\n        const size = this.get('size') || 10;\n        const studentid = this.get('studentid');\n        const model = this.model('activity');\n        model._pk = 'activityID';\n        const endDate = new Date();\n        const date = endDate.getFullYear()+'-'+(endDate.getMonth()+1)+'-'+endDate.getDate()+' 00:00:00'\n        const data = await model.where({shstate: 0, endDate:{'>': date}}).page(page,size).countSelect();\n\n        const arrdata = [];\n\n        for (const item of data.data) {\n            item.pics = await this.model('activity').getPicsbyid(item.activityID);\n            console.log(Number(new Date(item.startDate)), Number(new Date()), Number(new Date(item.endDate)))\n            if (Number(new Date(item.startDate)) <= Number(new Date()) <= Number(new Date(item.endDate))) {\n                item.status='进行中';\n            } else {\n                item.status = '';\n            }\n            let joindate = await this.model('student_activity').getStudentIsJoinActivity(studentid,item.activityID);\n            if (Number(new Date()) > Number(new Date(item.endDate)) && joindate && joindate.length > 0) {\n                item.hasjoin = '已完成'\n            } else if(item.hasjoin = joindate && joindate.length > 0) {\n                item.hasjoin = '已报名' \n            } else {\n                item.hasjoin = '';\n            }\n            item.needSchoolRangName = await this.model('school').getSchoolNameByIds(item.needSchoolRang);\n            item.shstate = await this.model('activity').getstate(item.activityID);\n            arrdata.push(item);\n        }\n        data.data = arrdata;\n\n        return this.success(data)\n    }\n\n    async getactivitydetailAction() {\n        const id = this.get('id');\n        const studentid = this.get('studentid');\n        const model = this.model('activity');\n        model._pk = 'activityID';\n        const data = await model.where({activityID: id}).find();\n        if (!think.isEmpty(data)) {\n            data.pics = await this.model('activity').getPicsbyid(data.activityID);\n            // data.discussList = await this.model('discuss').getDiscussById(id,1);\n            data.shstate = await this.model('activity').getstate(data.activityID);\n            let joindate = await this.model('student_activity').getStudentIsJoinActivity(studentid,data.activityID);\n            if (Number(new Date()) > Number(new Date(data.endDate)) && joindate && joindate.length > 0) {\n                data.hasjoin = '已完成'\n            } else if(data.hasjoin = joindate && joindate.length > 0) {\n                data.hasjoin = '已报名' \n            } else {\n                data.hasjoin = '';\n            }\n        }\n        return this.success(data);\n    }\n\n    async getactivitydetailForGroupAction() {\n        const id = this.get('id');\n        const studentid = this.get('studentid');\n        const model = this.model('activity');\n        model._pk = 'activityID';\n        const data = await model.where({activityID: id}).find();\n        if (!think.isEmpty(data)) {\n            data.pics = await this.model('activity').getPicsbyid(data.activityID);\n            // data.discussList = await this.model('discuss').getDiscussById(id,1);\n            data.shstate = await this.model('activity').getstate(data.activityID);\n            let joindate = await this.model('student_activity').getStudentIsJoinActivity(studentid,data.activityID);\n            if (Number(new Date()) > Number(new Date(data.endDate)) && joindate && joindate.length > 0) {\n                data.hasjoin = '已完成'\n            } else if(data.hasjoin = joindate && joindate.length > 0) {\n                data.hasjoin = '已报名' \n            } else {\n                data.hasjoin = '';\n            }\n            data.group=await this.model('group').where({activityid:data.activityID}).select();\n        }\n        return this.success(data);\n    }\n\n    async getActivityDiscussListAction() {\n        const id = this.get('id');\n        const model = this.model('activity');\n        model._pk = 'activityID';\n        const data = await model.where({activityID: id}).find();\n        if (!think.isEmpty(data)) {\n            data.discussList = await this.model('discuss').getDiscussById(id,1);\n            \n        }\n        return this.success(data);\n    }\n\n    async getActivitySceneryListAction() {\n        const studentid = this.get('studentid');\n        const model =  this.model('activity_scenery');\n        const pageindex = this.get('pageindex') || 1;\n        const pagesize = this.get('pagesize') || 5;\n        const activityid = this.get('activityid');\n        const idcondition = activityid ? 'a.activityID=' + activityid : '1=1';\n        const start = (pageindex -1) * pagesize;\n        const data = await model.query(\"select s.*,a.activityName,a.startSceneryid,a.endSceneryid,sc.schoolid,sc.address,sc.shdesc,sc.longitude,sc.latitude,sc.sctype,sc.shstate,sc.sceneryTitle from culture_activity_scenery as s left join culture_activity a on a.activityID=s.activityid left join culture_scenery sc on s.sceneryid=sc.sceneryID where \"+idcondition+\" and a.activityID limit \"+start+\",\"+pagesize+\" \");\n        const counta = await model.query(\"select count(*) t from (select s.*,a.activityName,a.startSceneryid,a.endSceneryid,sc.schoolid,sc.address,sc.shdesc,sc.longitude,sc.latitude,sc.sctype,sc.shstate,sc.sceneryTitle from culture_activity_scenery as s left join culture_activity a on a.activityID=s.activityid left join culture_scenery sc on s.sceneryid=sc.sceneryID where \"+idcondition+\" ) t\");\n        const pagecount = Math.ceil(counta[0].t / pagesize);\n\n        const arrdata = [];\n        let arrScen = [];\n        let arrSchool = []\n        for (const item of data) {\n            item.pics = await this.model('activity').getPicsbyid(item.activityid);\n            item.shstate = await this.model('activity').getstate(item.activityid);\n            arrScen.push(item.sceneryid);\n            arrSchool.push(item.schoolid)\n            // item.question = await this.model('student_activity').studentJoinActivityAndAnswer(studentid,item.activityID,item.questionid)\n            arrdata.push(item)\n        }\n        let complateSceneryNum = await this.model('attention_activity').where({studentid:studentid,activityid:activityid}).count();\n        let complateSchoolNum = await this.model('student_school').where({studentid:studentid,shstate:1}).count();\n        arrScen = _.uniq(arrScen);\n        arrSchool = _.uniq(arrSchool);\n        \n        data.data = arrdata;\n        return this.success({counta:counta[0].t,pagecount:pagecount,pageindex:pageindex,pagesize:pagesize,totalScenery:arrScen,totalSchool:arrSchool,complateSceneryNum:complateSceneryNum,complateSchoolNum:complateSchoolNum,data})\n    }\n\n    async listAction() {\n        const page = this.get('page') || 1;\n        const size = this.get('size') || 10;\n        let userinfo = await this.cache('userinfo');\n        console.log('session',userinfo)\n\n        const studentid = this.get('studentid');\n        const model = this.model('activity');\n        model._pk = 'activityID';\n        const endDate = new Date();\n        const date = endDate.getFullYear()+'-'+(endDate.getMonth()+1)+'-'+endDate.getDate()+' 00:00:00'\n        let data = {};\n        if (userinfo[0].usertype == 0) {\n            data = await model.where({shstate: 0, endDate:{'>': date}, createbyuserid: userinfo[0].sysUserID}).page(page,size).countSelect();\n        } else {\n            data = await model.where({shstate: 0, endDate:{'>': date}}).page(page,size).countSelect();\n        }\n        \n        const arrdata = [];\n\n        for (const item of data.data) {\n            item.pics = await this.model('activity').getPicsbyid(item.activityID);\n            item.sceneryCount = await this.model('activity_scenery').where({activityid:item.activityID}).count('activityid');\n            item.questionCount = 1; //await this.model('question').where({activityid:item.activityID}).count('activityid');\n            // console.log(Number(new Date(item.startDate)), Number(new Date()), Number(new Date(item.endDate)))\n        \n            item.needSchoolRangName = await this.model('school').getSchoolNameByIds(item.needSchoolRang);\n            // item.shstate = await this.model('activity').getstate(item.activityID);\n            arrdata.push(item);\n        }\n        data.data = arrdata;\n\n        return this.success(data)\n    }\n\n    async list2Action() {\n        const page = this.get('page') || 1;\n        const size = this.get('size') || 10;\n        let userinfo = await this.cache('userinfo');\n\n        const model = this.model('question');\n        model._pk = 'questionID';\n        let list = [];\n        if (userinfo && userinfo[0] && userinfo[0].usertype == 0) {\n            list = await model.field(['q.questionID','q.questiontitle','q.answera','q.answerb','q.answerc','q.answerd','q.rightanswer',\n                's.sceneryid','s.activityid','cs.sceneryTitle','act.startAddress'])\n            .alias('q')\n            .join({\n                table:'activity_scenery',\n                join:'left',\n                as: 's',\n                on: ['q.questionID', 's.questionID']\n            })\n            .join({\n                table:'scenery',\n                join: 'left',\n                as: 'cs',\n                on: ['cs.sceneryid','s.sceneryid']\n            })\n            .join({\n                table:'activity',\n                join:'left',\n                as: 'act',\n                on: ['act.activityID','s.activityid']\n            }).order('activityid desc').where({createbyuserid: userinfo[0].sysUserID}).page(page, size).countSelect();\n        } else {\n            list = await model.field(['q.questionID','q.questiontitle','q.answera','q.answerb','q.answerc','q.answerd','q.rightanswer',\n                's.sceneryid','s.activityid','cs.sceneryTitle','act.startAddress'])\n            .alias('q')\n            .join({\n                table:'activity_scenery',\n                join:'left',\n                as: 's',\n                on: ['q.questionID', 's.questionID']\n            })\n            .join({\n                table:'scenery',\n                join: 'left',\n                as: 'cs',\n                on: ['cs.sceneryid','s.sceneryid']\n            })\n            .join({\n                table:'activity',\n                join:'left',\n                as: 'act',\n                on: ['act.activityID','s.activityid']\n            }).order('activityid desc').page(page, size).countSelect();\n        }\n        \n        return this.success(list)\n    }\n\n    async addEdit1Action() {\n        const activityName = this.post('activityname');\n        const sponsor = this.post('sponsor') || '';\n        const meetingPlace = this.post('meetingplace') || '';\n        const secondSponsor = this.post('secondsponsor') || '';\n        const needSchoolRang= this.post('needschoolrang');\n\n        const startDate = this.post('startdate');\n        const endDate = this.post('enddate');\n        const shdesc = this.post('shdesc');\n\n        const shstate = this.post('shstate');\n        const startAddress = this.post('startaddress');\n        const needSchoolPass = this.post('needschoolpass');\n        const needSceneryPass = this.post('needscenerypass');\n        const settingStart = this.post('settingstart');\n        const startSceneryid = this.post('startsceneryid');\n\n        const settingEnd = this.post('settingend');\n        const endSceneryid = this.post('endsceneryid');\n        const isGroup = this.post('isgroup');\n        const groupNum = this.post('groupnum');\n\n        const id = this.get('id');\n        let userinfo = await this.cache('userinfo');\n        // console.log('session',userinfo[0])\n\n        let param = {\n            activityName,\n            sponsor,\n            meetingPlace,\n            secondSponsor,\n            needSchoolRang,\n            startDate,\n            endDate,\n            shdesc,\n            shstate,\n            startAddress,\n            needSchoolPass,\n            needSceneryPass,\n            settingStart,\n            startSceneryid,\n            settingEnd,\n            endSceneryid,\n            isGroup,\n            groupNum,createbyuserid: userinfo[0].sysUserID\n        }; \n        if (think.isEmpty(id)) {\n            let model = this.model('activity');\n            const insertid = await model.add(param);\n            \n            // 上传活动图片\n            if (insertid) {\n                return this.json({\n                        insertid:insertid\n                    });\n            }\n        } else {\n            // 1 删除source, 2修改\n            await this.model('source').where({targetid:id}).delete();\n            await this.model('activity').where({activityID:id}).update(param);\n            return this.success('活动修改成功')\n        }\n        \n    }\n\n    async addEdit2Action() {\n        const sceneryid = this.post('sceneryid');\n        const questiontitle = this.post('questiontitle');\n        const questiontype = this.post('questiontype') || 0;\n        const answera = this.post('answera');\n        const answerb = this.post('answerb');\n        const answerc = this.post('answerc');\n        const answerd = this.post('answerd');\n        const rightanswer = this.post('rightanswer');\n        const id = this.get('id');\n        const activityid = this.get('activityid');\n\n        const questionData = {\n            sceneryid:sceneryid,\n            questionTitle:questiontitle,\n            questionType:questiontype,\n            answerA: answera,\n            answerB: answerb,\n            answerC: answerc,\n            answerD: answerd,\n            rightAnswer: rightanswer\n        }\n\n        if (think.isEmpty(id)) {\n            const questId = await this.model('question').add(questionData);\n            if (questId) {\n                await this.model('activity_scenery').add({\n                    sceneryid,questionid:questId,activityid:activityid\n                });\n            }\n            return this.success('第二步成功');\n        } else {\n            await this.model('activity_scenery').where({questionid:id}).delete()\n            await this.model('question').where({questionID:id}).update(questionData);\n            await this.model('activity_scenery').add({\n                sceneryid,questionid:id,activityid:activityid\n            });\n            return this.success('修改成功')\n        }\n    }\n\n    async deleteAction() {\n        const id = this.get('id');\n        const data = {\n            shstate: 1\n        }\n        await this.model('activity').where({activityID:id}).update(data);\n        return this.success('活动删除成功')\n    }\n\n    async delete2Action() {\n        const id = this.get('id');\n        const data = {\n            shstate: 1\n        }\n        await this.model('question').where({questionID:id}).update(data);\n        return this.success('活动第二步问题删除成功')\n    }\n}"
    ]
}