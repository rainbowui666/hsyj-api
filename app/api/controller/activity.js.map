{
    "version": 3,
    "sources": [
        "../../../src/api/controller/activity.js"
    ],
    "names": [
        "Base",
        "require",
        "_",
        "fs",
        "module",
        "exports",
        "frontListAction",
        "page",
        "get",
        "size",
        "studentid",
        "model",
        "_pk",
        "endDate",
        "Date",
        "date",
        "getFullYear",
        "getMonth",
        "getDate",
        "data",
        "where",
        "shstate",
        "countSelect",
        "arrdata",
        "item",
        "pics",
        "getPicsbyid",
        "activityID",
        "Number",
        "startDate",
        "status",
        "joindate",
        "getStudentIsJoinActivity",
        "length",
        "hasjoin",
        "needSchoolRangName",
        "getSchoolNameByIds",
        "needSchoolRang",
        "getstate",
        "push",
        "success",
        "getactivitydetailAction",
        "id",
        "find",
        "think",
        "isEmpty",
        "getactivitydetailForGroupAction",
        "group",
        "activityid",
        "select",
        "getActivityDiscussListAction",
        "discussList",
        "getDiscussById",
        "getActivitySceneryListAction",
        "pageindex",
        "pagesize",
        "idcondition",
        "start",
        "query",
        "counta",
        "pagecount",
        "Math",
        "ceil",
        "t",
        "arrScen",
        "arrSchool",
        "sceneryid",
        "schoolid",
        "complateSceneryNum",
        "count",
        "complateSchoolNum",
        "uniq",
        "totalScenery",
        "totalSchool",
        "listAction",
        "userinfo",
        "cache",
        "console",
        "log",
        "usertype",
        "createbyuserid",
        "sysUserID",
        "sceneryCount",
        "questionCount",
        "list2Action",
        "list",
        "condition",
        "field",
        "alias",
        "join",
        "table",
        "as",
        "on",
        "order",
        "getActivityQuestionDetailAction",
        "questionid"
    ],
    "mappings": "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",
    "file": "../../../src/api/controller/activity.js",
    "sourcesContent": [
        "const Base = require('./base.js');\nconst _ = require('lodash');\nconst fs = require('fs');\n\nmodule.exports = class extends Base {\n    async frontListAction() {\n        const page = this.get('pageindex') || 1;\n        const size = this.get('pagesize') || 10;\n        const studentid = this.get('studentid');\n        const model = this.model('activity');\n        model._pk = 'activityID';\n        const endDate = new Date();\n        const date = endDate.getFullYear()+'-'+(endDate.getMonth()+1)+'-'+endDate.getDate()+' 00:00:00'\n        const data = await model.where({shstate: 0, endDate:{'>': date}}).page(page,size).countSelect();\n\n        const arrdata = [];\n\n        for (const item of data.data) {\n            item.pics = await this.model('activity').getPicsbyid(item.activityID);\n            // console.log(Number(new Date(item.startDate)), Number(new Date()), Number(new Date(item.endDate)))\n            if (Number(new Date(item.startDate)) <= Number(new Date()) <= Number(new Date(item.endDate))) {\n                item.status='进行中';\n            } else {\n                item.status = '';\n            }\n            let joindate = await this.model('student_activity').getStudentIsJoinActivity(studentid,item.activityID);\n            if (Number(new Date()) > Number(new Date(item.endDate)) && joindate && joindate.length > 0) {\n                item.hasjoin = '已完成'\n            } else if(item.hasjoin = joindate && joindate.length > 0) {\n                item.hasjoin = '已报名' \n            } else {\n                item.hasjoin = '';\n            }\n            item.needSchoolRangName = await this.model('school').getSchoolNameByIds(item.needSchoolRang);\n            item.shstate = await this.model('activity').getstate(item.activityID);\n            arrdata.push(item);\n        }\n        data.data = arrdata;\n\n        return this.success(data)\n    }\n\n    async getactivitydetailAction() {\n        const id = this.get('id');\n        const studentid = this.get('studentid');\n        const model = this.model('activity');\n        model._pk = 'activityID';\n        const data = await model.where({activityID: id}).find();\n        if (!think.isEmpty(data)) {\n            data.pics = await this.model('activity').getPicsbyid(data.activityID);\n            // data.discussList = await this.model('discuss').getDiscussById(id,1);\n            data.shstate = await this.model('activity').getstate(data.activityID);\n            let joindate = await this.model('student_activity').getStudentIsJoinActivity(studentid,data.activityID);\n            if (Number(new Date()) > Number(new Date(data.endDate)) && joindate && joindate.length > 0) {\n                data.hasjoin = '已完成'\n            } else if(data.hasjoin = joindate && joindate.length > 0) {\n                data.hasjoin = '已报名' \n            } else {\n                data.hasjoin = '';\n            }\n        }\n        return this.success(data);\n    }\n\n    async getactivitydetailForGroupAction() {\n        const id = this.get('id');\n        const studentid = this.get('studentid');\n        const model = this.model('activity');\n        model._pk = 'activityID';\n        const data = await model.where({activityID: id}).find();\n        if (!think.isEmpty(data)) {\n            data.pics = await this.model('activity').getPicsbyid(data.activityID);\n            // data.discussList = await this.model('discuss').getDiscussById(id,1);\n            data.shstate = await this.model('activity').getstate(data.activityID);\n            let joindate = await this.model('student_activity').getStudentIsJoinActivity(studentid,data.activityID);\n            if (Number(new Date()) > Number(new Date(data.endDate)) && joindate && joindate.length > 0) {\n                data.hasjoin = '已完成'\n            } else if(data.hasjoin = joindate && joindate.length > 0) {\n                data.hasjoin = '已报名' \n            } else {\n                data.hasjoin = '';\n            }\n            data.group=await this.model('group').where({activityid:data.activityID}).select();\n        }\n        return this.success(data);\n    }\n\n    async getActivityDiscussListAction() {\n        const id = this.get('id');\n        const model = this.model('activity');\n        model._pk = 'activityID';\n        const data = await model.where({activityID: id}).find();\n        if (!think.isEmpty(data)) {\n            data.discussList = await this.model('discuss').getDiscussById(id,1);\n            \n        }\n        return this.success(data);\n    }\n\n    async getActivitySceneryListAction() {\n        const studentid = this.get('studentid');\n        const model =  this.model('activity_scenery');\n        const pageindex = this.get('pageindex') || 1;\n        const pagesize = this.get('pagesize') || 5;\n        const activityid = this.get('activityid');\n        const idcondition = activityid ? 'a.activityID=' + activityid : '1=1';\n        const start = (pageindex -1) * pagesize;\n        const data = await model.query(\"select s.*,a.activityName,a.startSceneryid,a.endSceneryid,sc.schoolid,sc.address,sc.shdesc,sc.longitude,sc.latitude,sc.sctype,sc.shstate,sc.sceneryTitle from culture_activity_scenery as s left join culture_activity a on a.activityID=s.activityid left join culture_scenery sc on s.sceneryid=sc.sceneryID where \"+idcondition+\" and a.activityID limit \"+start+\",\"+pagesize+\" \");\n        const counta = await model.query(\"select count(*) t from (select s.*,a.activityName,a.startSceneryid,a.endSceneryid,sc.schoolid,sc.address,sc.shdesc,sc.longitude,sc.latitude,sc.sctype,sc.shstate,sc.sceneryTitle from culture_activity_scenery as s left join culture_activity a on a.activityID=s.activityid left join culture_scenery sc on s.sceneryid=sc.sceneryID where \"+idcondition+\" ) t\");\n        const pagecount = Math.ceil(counta[0].t / pagesize);\n\n        const arrdata = [];\n        let arrScen = [];\n        let arrSchool = []\n        for (const item of data) {\n            item.pics = await this.model('activity').getPicsbyid(item.activityid);\n            item.shstate = await this.model('activity').getstate(item.activityid);\n            arrScen.push(item.sceneryid);\n            arrSchool.push(item.schoolid)\n            // item.question = await this.model('student_activity').studentJoinActivityAndAnswer(studentid,item.activityID,item.questionid)\n            arrdata.push(item)\n        }\n        let complateSceneryNum = await this.model('attention_activity').where({studentid:studentid,activityid:activityid}).count();\n        let complateSchoolNum = await this.model('student_school').where({studentid:studentid,shstate:1}).count();\n        arrScen = _.uniq(arrScen);\n        arrSchool = _.uniq(arrSchool);\n        \n        data.data = arrdata;\n        return this.success({counta:counta[0].t,pagecount:pagecount,pageindex:pageindex,pagesize:pagesize,totalScenery:arrScen,totalSchool:arrSchool,complateSceneryNum:complateSceneryNum,complateSchoolNum:complateSchoolNum,data})\n    }\n\n    async listAction() {\n        const page = this.get('pageindex') || 1;\n        const size = this.get('pagesize') || 10;\n        let userinfo = await this.cache('userinfo');\n        console.log('session',userinfo)\n\n        const studentid = this.get('studentid');\n        const model = this.model('activity');\n        model._pk = 'activityID';\n        const endDate = new Date();\n        const date = endDate.getFullYear()+'-'+(endDate.getMonth()+1)+'-'+endDate.getDate()+' 00:00:00'\n        let data = {};\n        if (userinfo && userinfo[0].usertype == 0) {\n            data = await model.where({shstate: 0, endDate:{'>': date}, createbyuserid: userinfo[0].sysUserID}).page(page,size).countSelect();\n        } else {\n            data = await model.where({shstate: 0, endDate:{'>': date}}).page(page,size).countSelect();\n        }\n        \n        const arrdata = [];\n\n        for (const item of data.data) {\n            item.pics = await this.model('activity').getPicsbyid(item.activityID);\n            item.sceneryCount = await this.model('activity_scenery').where({activityid:item.activityID}).count('activityid');\n            item.questionCount = 1; //await this.model('question').where({activityid:item.activityID}).count('activityid');\n            // console.log(Number(new Date(item.startDate)), Number(new Date()), Number(new Date(item.endDate)))\n        \n            item.needSchoolRangName = await this.model('school').getSchoolNameByIds(item.needSchoolRang);\n            // item.shstate = await this.model('activity').getstate(item.activityID);\n            arrdata.push(item);\n        }\n        data.data = arrdata;\n\n        return this.success(data)\n    }\n\n    async list2Action() {\n        const page = this.get('pageindex') || 1;\n        const size = this.get('pagesize') || 10;\n        let userinfo = await this.cache('userinfo');\n        const activityid = this.get('activityid');\n\n\n        const model = this.model('question');\n        model._pk = 'questionID';\n        let list = [];\n        if (userinfo && userinfo[0] && userinfo[0].usertype == 0) {\n            console.log('aaa')\n            let condition = {};\n            if (think.isEmpty(activityid)) {\n                condition = {createbyuserid: userinfo[0].sysUserID};\n            } else {\n                condition = {'s.activityid':activityid,createbyuserid: userinfo[0].sysUserID};\n            }\n            list = await model.field(['q.questionID','q.questiontitle','q.answera','q.answerb','q.answerc','q.answerd','q.rightanswer',\n                's.sceneryid','s.activityid','cs.sceneryTitle','act.startAddress'])\n            .alias('q')\n            .join({\n                table:'activity_scenery',\n                join:'left',\n                as: 's',\n                on: ['q.questionID', 's.questionID']\n            })\n            .join({\n                table:'scenery',\n                join: 'left',\n                as: 'cs',\n                on: ['cs.sceneryid','s.sceneryid']\n            })\n            .join({\n                table:'activity',\n                join:'left',\n                as: 'act',\n                on: ['act.activityID','s.activityid']\n            }).order('activityid desc').where(condition).page(page, size).countSelect();\n        } else {\n            console.log('bbb')\n            let condition = {};\n            if (think.isEmpty(activityid)) {\n                condition = {1: 1};\n            } else {\n                condition['s.activityid'] = activityid;\n            }\n            list = await model.field(['q.questionID','q.questiontitle','q.answera','q.answerb','q.answerc','q.answerd','q.rightanswer',\n                's.sceneryid','s.activityid','cs.sceneryTitle','act.startAddress'])\n            .alias('q')\n            .join({\n                table:'activity_scenery',\n                join:'left',\n                as: 's',\n                on: ['q.questionID', 's.questionID']\n            })\n            .join({\n                table:'scenery',\n                join: 'left',\n                as: 'cs',\n                on: ['cs.sceneryid','s.sceneryid']\n            })\n            .join({\n                table:'activity',\n                join:'left',\n                as: 'act',\n                on: ['act.activityID','s.activityid']\n            }).where(condition).order('activityid desc').page(page, size).countSelect();\n        }\n        \n        return this.success(list)\n    }\n\n    async getActivityQuestionDetailAction() {\n        const questionid = this.get('questionid');\n        const activityid = this.get('activityid');\n        const model = this.model('question');\n        // model._pk = 'questionID';\n\n        let data =  await model.field(['q.questionID','q.questiontitle','q.answera','q.answerb','q.answerc','q.answerd','q.rightanswer',\n        's.sceneryid','s.activityid','cs.sceneryTitle','act.startAddress'])\n        .alias('q')\n        .join({\n            table:'activity_scenery',\n            join:'left',\n            as: 's',\n            on: ['q.questionID', 's.questionID']\n        })\n        .join({\n            table:'scenery',\n            join: 'left',\n            as: 'cs',\n            on: ['cs.sceneryid','s.sceneryid']\n        })\n        .join({\n            table:'activity',\n            join:'left',\n            as: 'act',\n            on: ['act.activityID','s.activityid']\n        }).where({'q.questionID': questionid, 's.activityid': activityid}).find();\n        return this.success(data)\n    }\n\n    \n}"
    ]
}