{
    "version": 3,
    "sources": [
        "../../../src/api/controller/activity.js"
    ],
    "names": [
        "Base",
        "require",
        "_",
        "fs",
        "module",
        "exports",
        "getSwipeActAction",
        "model",
        "_pk",
        "data",
        "field",
        "where",
        "isrecommend",
        "shstate",
        "order",
        "limit",
        "select",
        "arrdata",
        "item",
        "pics",
        "getPicsbyid",
        "activityID",
        "joinnum",
        "getJoinNum",
        "push",
        "success",
        "frontListAction",
        "page",
        "get",
        "size",
        "studentid",
        "endDate",
        "Date",
        "date",
        "getFullYear",
        "getMonth",
        "getDate",
        "iscomplate",
        "think",
        "datetime",
        "countSelect",
        "isEmpty",
        "joindate",
        "isGroup",
        "getStudentIsJoinActivity",
        "getStudentIsJoinGroup2",
        "start",
        "Number",
        "startDate",
        "nowd",
        "end",
        "console",
        "log",
        "hasjoin",
        "isAttentention",
        "needSchoolRangName",
        "getSchoolNameByIds",
        "needSchoolRang",
        "getstate",
        "getactivitydetailAction",
        "id",
        "find",
        "getactivitydetailForGroupAction",
        "groupData",
        "activityid",
        "group",
        "countgroupids",
        "groupid",
        "getField",
        "uniq",
        "totalgroupstudents",
        "length",
        "getActivityDiscussListAction",
        "discussList",
        "getDiscussById",
        "getActivitySceneryListAction",
        "pageindex",
        "pagesize",
        "idcondition",
        "query",
        "counta",
        "pagecount",
        "Math",
        "ceil",
        "t",
        "arrScen",
        "arrSchool",
        "sceneryState",
        "getstudentstate",
        "sceneryid",
        "schoolid",
        "complateSceneryNum",
        "complateSchoolNum",
        "count",
        "totalScenery",
        "totalSchool",
        "listAction",
        "userinfo",
        "getUserInfo",
        "ctx",
        "state",
        "token",
        "userId",
        "usertype",
        "createbyuserid",
        "sysUserID",
        "sceneryCount",
        "questionCount",
        "sceneryRange",
        "getsceneryrangebyid",
        "list2Action",
        "list",
        "condition",
        "alias",
        "join",
        "table",
        "as",
        "on",
        "getActivityQuestionDetailAction",
        "questionid"
    ],
    "mappings": "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",
    "file": "../../../src/api/controller/activity.js",
    "sourcesContent": [
        "const Base = require('./base.js');\nconst _ = require('lodash');\nconst fs = require('fs');\n\nmodule.exports = class extends Base {\n    async getSwipeActAction() {\n        const model = this.model('activity');\n        model._pk = 'activityID';\n        const data = await model.field(['activityID', 'activityName']).where({isrecommend:1, shstate:0}).order('activityID desc').limit(0,5).select();\n        \n        const arrdata = [];\n        for (const item of data) {\n            item.pics = await this.model('activity').getPicsbyid(item.activityID);\n            item.joinnum = await this.model('student_activity').getJoinNum(item.activityID);\n            arrdata.push(item);\n        }\n\n        return this.success(data)\n    }\n    async frontListAction() {\n        const page = this.get('pageindex') || 1;\n        const size = this.get('pagesize') || 10;\n        const studentid = this.get('studentid');\n        const model = this.model('activity');\n        model._pk = 'activityID';\n        const endDate = new Date();\n        const date = endDate.getFullYear()+'-'+(endDate.getMonth()+1)+'-'+endDate.getDate()+' 00:00:00'\n        // endDate:{'>': think.datetime(date,'YYYY-MM-DD')\n        const data = await model.where({shstate: 0, iscomplate: 1, endDate:{'>': think.datetime(date,'YYYY-MM-DD')}}).order('activityID desc').page(page,size).countSelect();\n\n        const arrdata = [];\n\n        for (const item of data.data) {\n            item.pics = await this.model('activity').getPicsbyid(item.activityID);\n            if (!think.isEmpty(studentid)) {\n                \n                // let joindate = await this.model('student_activity').getStudentIsJoinActivity(studentid,item.activityID, 1);\n                let joindate = null;\n                if (item.isGroup == 0) {\n                    joindate = await this.model('student_activity').getStudentIsJoinActivity(studentid,item.activityID, 1);\n                } else {\n                    joindate = await this.model('student_activity').getStudentIsJoinGroup2(studentid,item.activityID, 1);\n                }\n\n                let start = Number(new Date(item.startDate));\n                let nowd = Number(new Date());\n                let end = Number(new Date(item.endDate));\n\n                if (joindate) {\n                    console.log('joindate---', joindate, start, nowd, end)\n                }\n\n                if (joindate && joindate.iscomplate) {\n                    item.hasjoin = '已完成'\n                } else if (start < nowd && nowd < end && (joindate && joindate.isAttentention)) {\n                    item.hasjoin = '已报名,进行中';\n                } else if (start < nowd && nowd < end) {\n                    item.hasjoin = '进行中';\n                } else if(joindate && joindate.isAttentention) {\n                    item.hasjoin = '已报名' \n                }\n            } else {\n                let start = Number(new Date(item.startDate));\n                let nowd = Number(new Date());\n                let end = Number(new Date(item.endDate));\n\n                if (start < nowd && nowd < end) {\n                    item.hasjoin = '进行中';\n                } else if (end < nowd) {\n                    item.hasjoin = '已结束'\n                } else {\n                    item.hasjoin = '未开始';\n                }\n            } \n            item.needSchoolRangName = await this.model('school').getSchoolNameByIds(item.needSchoolRang);\n            item.shstate = await this.model('activity').getstate(item.activityID);\n            arrdata.push(item);\n        }\n        data.data = arrdata;\n\n        return this.success(data)\n    }\n\n    async getactivitydetailAction() {\n        const id = this.get('id');\n        const studentid = this.get('studentid');\n        const model = this.model('activity');\n        model._pk = 'activityID';\n        const data = await model.where({activityID: id}).find();\n\n        if (!think.isEmpty(data)) {\n            data.pics = await this.model('activity').getPicsbyid(data.activityID);\n            // data.discussList = await this.model('discuss').getDiscussById(id,1);\n            data.shstate = await this.model('activity').getstate(data.activityID);\n            if (!think.isEmpty(studentid)) {\n                let joindate = null;\n                if (data.isGroup == 0) {\n                    joindate = await this.model('student_activity').getStudentIsJoinActivity(studentid,data.activityID, 1);\n                } else {\n                    joindate = await this.model('student_activity').getStudentIsJoinGroup2(studentid,data.activityID, 1);\n                }\n                \n                let start = Number(new Date(data.startDate));\n                let nowd = Number(new Date());\n                let end = Number(new Date(data.endDate));\n\n                if (joindate && joindate.iscomplate) {\n                    data.hasjoin = '已完成'\n                } else if (start < nowd && nowd < end && (joindate && joindate.isAttentention)) {\n                    data.hasjoin = '已报名,进行中';\n                } else if (start < nowd && nowd < end) {\n                    data.hasjoin = '进行中';\n                } else if(joindate && joindate.isAttentention) {\n                    data.hasjoin = '已报名' \n                }\n                \n            }\n        }\n        return this.success(data);\n    }\n\n    async getactivitydetailForGroupAction() {\n        const id = this.get('id');\n        const studentid = this.get('studentid');\n        const model = this.model('activity');\n        model._pk = 'activityID';\n        const data = await model.where({activityID: id}).find();\n\n        if (!think.isEmpty(data)) {\n            data.pics = await this.model('activity').getPicsbyid(data.activityID);\n            // data.discussList = await this.model('discuss').getDiscussById(id,1);\n            data.shstate = await this.model('activity').getstate(data.activityID);\n            let joindate = await this.model('student_activity').getStudentIsJoinGroup2(studentid,data.activityID, 1);\n            let start = Number(new Date(data.startDate));\n            let nowd = Number(new Date());\n            let end = Number(new Date(data.endDate));\n\n            if (joindate && joindate.iscomplate) {\n                data.hasjoin = '已完成'\n            } else if (start < nowd && nowd < end && ((joindate && joindate.isAttentention))) {\n                data.hasjoin = '已报名,进行中';\n            } else if (start < nowd && nowd < end) {\n                data.hasjoin = '进行中';\n            } else if(joindate && joindate.isAttentention) {\n                data.hasjoin = '已报名' \n            }\n\n            let groupData = await this.model('group').where({activityid:data.activityID, studentid: studentid}).select();\n            data.group = groupData;\n\n            // 团队人数是否到达活动要求人数\n            if (!think.isEmpty(groupData)) {\n                let countgroupids = await this.model('student_group').field('studentid').where({activityid: id,groupid: groupData[0].groupid}).getField('studentid');\n                if (!think.isEmpty(countgroupids)) {\n                    countgroupids = _.uniq(countgroupids);\n                    data.totalgroupstudents = countgroupids.length;\n                } else {\n                    data.totalgroupstudents = 0;\n                }\n            } else {\n                data.totalgroupstudents = -1;\n            }\n        }\n        return this.success(data);\n    }\n\n    async getActivityDiscussListAction() {\n        const id = this.get('id');\n        const model = this.model('activity');\n        model._pk = 'activityID';\n        const data = await model.where({activityID: id}).find();\n        if (!think.isEmpty(data)) {\n            data.discussList = await this.model('discuss').getDiscussById(id,1);\n            \n        }\n        return this.success(data);\n    }\n\n    async getActivitySceneryListAction() {\n        const studentid = this.get('studentid');\n        const model =  this.model('activity_scenery');\n        const pageindex = this.get('pageindex') || 1;\n        const pagesize = this.get('pagesize') || 5;\n        const activityid = this.get('activityid');\n        const idcondition = activityid ? 'a.activityID=' + activityid : '1=1';\n        const start = (pageindex -1) * pagesize;\n        const data = await model.query(\"select distinct(s.sceneryid),s.activityid,a.activityName,a.startSceneryid,a.endSceneryid,sc.schoolid,sc.address,sc.shdesc,sc.longitude,sc.latitude,sc.sctype,sc.shstate,sc.sceneryTitle from culture_activity_scenery as s inner join culture_activity a on a.activityID=s.activityid inner join culture_scenery sc on s.sceneryid=sc.sceneryID where \"+idcondition+\" and a.activityID limit \"+start+\",\"+pagesize+\" \");\n        const counta = await model.query(\"select count(*) t from (select distinct(s.sceneryid),s.activityid,a.activityName,a.startSceneryid,a.endSceneryid,sc.schoolid,sc.address,sc.shdesc,sc.longitude,sc.latitude,sc.sctype,sc.shstate,sc.sceneryTitle from culture_activity_scenery as s inner join culture_activity a on a.activityID=s.activityid inner join culture_scenery sc on s.sceneryid=sc.sceneryID where \"+idcondition+\" ) t\");\n        const pagecount = Math.ceil(counta[0].t / pagesize);\n\n        const arrdata = [];\n        let arrScen = [];\n        let arrSchool = []\n        for (const item of data) {\n            item.pics = await this.model('activity').getPicsbyid(item.activityid);\n            item.shstate = await this.model('activity').getstate(item.activityid);\n            item.group = await this.model('student_group').where({activityid:activityid, studentid: studentid}).select();\n            if (!think.isEmpty(studentid)) {\n                item.sceneryState = await this.model('scenery').getstudentstate(item.sceneryid, studentid, item.activityid);\n            }\n\n            arrScen.push(item.sceneryid);\n            arrSchool.push(item.schoolid)\n            // item.question = await this.model('student_activity').studentJoinActivityAndAnswer(studentid,item.activityID,item.questionid)\n            arrdata.push(item)\n        }\n        let complateSceneryNum = 0;\n        let complateSchoolNum = 0;\n        if (!think.isEmpty(studentid)) {\n            complateSceneryNum = await this.model('attention_activity').where({studentid:studentid,activityid:activityid}).count();\n            complateSchoolNum = await this.model('student_school').where({studentid:studentid,shstate:1}).count();\n        } else {\n             complateSceneryNum = await this.model('attention_activity').where({activityid:activityid}).count();\n             complateSchoolNum = await this.model('student_school').where({shstate:1}).count();\n        }\n        arrScen = _.uniq(arrScen);\n        arrSchool = _.uniq(arrSchool);\n        \n        data.data = arrdata;\n        return this.success({counta:counta[0].t,pagecount:pagecount,pageindex:pageindex,pagesize:pagesize,totalScenery:arrScen,totalSchool:arrSchool,complateSceneryNum:complateSceneryNum,complateSchoolNum:complateSchoolNum,data})\n    }\n\n    async listAction() {\n        const page = this.get('pageindex') || 1;\n        const size = this.get('pagesize') || 10;\n        let userinfo = await this.model('pagecache').getUserInfo(this.ctx.state.token, this.ctx.state.userId); // '+ this.ctx.state.token);\n        console.log('session',userinfo)\n\n        const studentid = this.get('studentid');\n        const model = this.model('activity');\n        model._pk = 'activityID';\n        const endDate = new Date();\n        let date = endDate.getFullYear()+'-'+(endDate.getMonth()+1)+'-'+endDate.getDate()+' 00:00:00';\n        // date = '2019-04-14 00:00:00';\n        // console.log('list', date)\n        let data = {};\n        if (userinfo && userinfo.usertype == 0) {\n            data = await model.where({shstate: 0, endDate:{'>': think.datetime(date,'YYYY-MM-DD')}, createbyuserid: userinfo.sysUserID}).order('activityID desc').page(page,size).countSelect();\n        } else {\n            data = await model.where({shstate: 0, endDate:{'>': think.datetime(date,'YYYY-MM-DD')}}).page(page,size).order('activityID desc').countSelect();\n        }\n        \n        const arrdata = [];\n\n        for (const item of data.data) {\n            item.pics = await this.model('activity').getPicsbyid(item.activityID);\n            item.sceneryCount = await this.model('activity_scenery').where({activityid:item.activityID}).count('activityid');\n            item.questionCount = 1; //await this.model('question').where({activityid:item.activityID}).count('activityid');\n            // console.log(Number(new Date(item.startDate)), Number(new Date()), Number(new Date(item.endDate)))\n        \n            item.needSchoolRangName = await this.model('school').getSchoolNameByIds(item.needSchoolRang);\n            item.sceneryRange = await this.model('activity_scenery').getsceneryrangebyid(item.activityID);\n            // item.shstate = await this.model('activity').getstate(item.activityID);\n            arrdata.push(item);\n        }\n        data.data = arrdata;\n\n        return this.success(data)\n    }\n\n    async list2Action() {\n        const page = this.get('pageindex') || 1;\n        const size = this.get('pagesize') || 10;\n        let userinfo = await this.model('pagecache').getUserInfo(this.ctx.state.token, this.ctx.state.userId); // await this.cache('userinfo'+ this.ctx.state.token);\n        const activityid = this.get('activityid');\n\n\n        const model = this.model('question');\n        model._pk = 'questionID';\n        let list = [];\n        if (userinfo && userinfo && userinfo.usertype == 0) {\n            let condition = {};\n            if (think.isEmpty(activityid)|| activityid == 'undefined') {\n                condition = {'act.createbyuserid': userinfo.sysUserID, 'q.shstate':0, 'cs.shstate':0, 'act.shstate':0, 's.questionid': ['!=', null]};\n            } else {\n                condition = {'act.activityid':activityid,'act.createbyuserid': userinfo.sysUserID, 'q.shstate':0, 'cs.shstate':0, 'act.shstate':0, 's.questionid': ['!=', null]};\n            }\n            list = await model.field(['q.questionID','q.questiontitle','q.answera','q.answerb','q.answerc','q.answerd','q.rightanswer',\n                's.sceneryid','s.activityid','cs.sceneryTitle','act.startAddress'])\n            .alias('q')\n            .join({\n                table:'activity_scenery',\n                join:'left',\n                as: 's',\n                on: ['q.sceneryid', 's.sceneryid']\n            })\n            .join({\n                table:'scenery',\n                join: 'left',\n                as: 'cs',\n                on: ['cs.sceneryid','s.sceneryid']\n            })\n            .join({\n                table:'activity',\n                join:'left',\n                as: 'act',\n                on: ['act.activityID','s.activityid']\n            }).order('activityid desc').where(condition).page(page, size).countSelect();\n        } else {\n            let condition = {};\n            if (think.isEmpty(activityid) || activityid == 'undefined') {\n                condition = {1: 1, 'q.shstate':0, 'cs.shstate':0, 'act.shstate':0,'s.questionid': ['!=', null]};\n            } else {\n                condition = {'s.activityid': activityid, 'q.shstate':0, 'cs.shstate':0, 'act.shstate':0,'s.questionid': ['!=', null]};\n            }\n            list = await model.field(['q.questionID','q.questiontitle','q.answera','q.answerb','q.answerc','q.answerd','q.rightanswer',\n                's.sceneryid','s.activityid','cs.sceneryTitle','act.startAddress'])\n            .alias('q')\n            .join({\n                table:'activity_scenery',\n                join:'left',\n                as: 's',\n                on: ['q.sceneryid', 's.sceneryid']\n            })\n            .join({\n                table:'scenery',\n                join: 'left',\n                as: 'cs',\n                on: ['cs.sceneryid','s.sceneryid']\n            })\n            .join({\n                table:'activity',\n                join:'left',\n                as: 'act',\n                on: ['act.activityID','s.activityid']\n            }).where(condition).order('activityid desc').page(page, size).countSelect();\n        }\n        \n        return this.success(list)\n    }\n\n    async getActivityQuestionDetailAction() {\n        const questionid = this.get('questionid');\n        const activityid = this.get('activityid');\n        const model = this.model('question');\n        // model._pk = 'questionID';\n\n        let data =  await model.field(['q.questionID','q.questiontitle','q.answera','q.answerb','q.answerc','q.answerd','q.rightanswer',\n        's.sceneryid','s.activityid','cs.sceneryTitle','act.startAddress'])\n        .alias('q')\n        .join({\n            table:'activity_scenery',\n            join:'left',\n            as: 's',\n            on: ['q.questionID', 's.questionID']\n        })\n        .join({\n            table:'scenery',\n            join: 'left',\n            as: 'cs',\n            on: ['cs.sceneryid','s.sceneryid']\n        })\n        .join({\n            table:'activity',\n            join:'left',\n            as: 'act',\n            on: ['act.activityID','s.activityid']\n        }).where({'q.questionID': questionid, 's.activityid': activityid}).find();\n        return this.success(data)\n    }\n\n    \n}"
    ]
}