{
    "version": 3,
    "sources": [
        "../../../src/api/controller/activity.js"
    ],
    "names": [
        "Base",
        "require",
        "_",
        "fs",
        "module",
        "exports",
        "getSwipeActAction",
        "model",
        "_pk",
        "data",
        "field",
        "where",
        "isrecommend",
        "shstate",
        "order",
        "limit",
        "select",
        "arrdata",
        "item",
        "pics",
        "getPicsbyid",
        "activityID",
        "joinnum",
        "getJoinNum",
        "push",
        "success",
        "frontListAction",
        "page",
        "get",
        "size",
        "studentid",
        "endDate",
        "Date",
        "date",
        "getFullYear",
        "getMonth",
        "getDate",
        "think",
        "datetime",
        "countSelect",
        "isEmpty",
        "joindate",
        "getStudentIsJoinActivity",
        "start",
        "Number",
        "startDate",
        "nowd",
        "end",
        "length",
        "hasjoin",
        "needSchoolRangName",
        "getSchoolNameByIds",
        "needSchoolRang",
        "getstate",
        "getactivitydetailAction",
        "id",
        "find",
        "getactivitydetailForGroupAction",
        "group",
        "activityid",
        "getActivityDiscussListAction",
        "discussList",
        "getDiscussById",
        "getActivitySceneryListAction",
        "pageindex",
        "pagesize",
        "idcondition",
        "query",
        "counta",
        "pagecount",
        "Math",
        "ceil",
        "t",
        "arrScen",
        "arrSchool",
        "sceneryid",
        "schoolid",
        "complateSceneryNum",
        "complateSchoolNum",
        "count",
        "uniq",
        "totalScenery",
        "totalSchool",
        "listAction",
        "userinfo",
        "cache",
        "console",
        "log",
        "usertype",
        "createbyuserid",
        "sysUserID",
        "sceneryCount",
        "questionCount",
        "sceneryRange",
        "getsceneryrangebyid",
        "list2Action",
        "list",
        "condition",
        "alias",
        "join",
        "table",
        "as",
        "on",
        "getActivityQuestionDetailAction",
        "questionid"
    ],
    "mappings": "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",
    "file": "../../../src/api/controller/activity.js",
    "sourcesContent": [
        "const Base = require('./base.js');\nconst _ = require('lodash');\nconst fs = require('fs');\n\nmodule.exports = class extends Base {\n    async getSwipeActAction() {\n        const model = this.model('activity');\n        model._pk = 'activityID';\n        const data = await model.field(['activityID', 'activityName']).where({isrecommend:1, shstate:0}).order('activityID desc').limit(0,5).select();\n        \n        const arrdata = [];\n        for (const item of data) {\n            item.pics = await this.model('activity').getPicsbyid(item.activityID);\n            item.joinnum = await this.model('student_activity').getJoinNum(item.activityID);\n            arrdata.push(item);\n        }\n\n        return this.success(data)\n    }\n    async frontListAction() {\n        const page = this.get('pageindex') || 1;\n        const size = this.get('pagesize') || 10;\n        const studentid = this.get('studentid');\n        const model = this.model('activity');\n        model._pk = 'activityID';\n        const endDate = new Date();\n        const date = endDate.getFullYear()+'-'+(endDate.getMonth()+1)+'-'+endDate.getDate()+' 00:00:00'\n        // endDate:{'>': think.datetime(date,'YYYY-MM-DD')\n        const data = await model.where({shstate: 0, endDate:{'>': think.datetime(date,'YYYY-MM-DD')}}).order('activityID desc').page(page,size).countSelect();\n\n        const arrdata = [];\n\n        for (const item of data.data) {\n            item.pics = await this.model('activity').getPicsbyid(item.activityID);\n            // console.log(Number(new Date(item.startDate)), Number(new Date()), Number(new Date(item.endDate)))\n            // if (Number(new Date(item.startDate)) <= Number(new Date()) <= Number(new Date(item.endDate))) {\n            //     item.status='进行中';\n            // } else {\n            //     item.status = '';\n            // }\n            if (!think.isEmpty(studentid)) {\n                let joindate = await this.model('student_activity').getStudentIsJoinActivity(studentid,item.activityID);\n                let start = Number(new Date(item.startDate));\n                let nowd = Number(new Date());\n                let end = Number(new Date(item.endDate));\n\n                if (nowd > end && joindate && joindate.length > 0) {\n                    item.hasjoin = '已完成'\n                } else if(joindate && joindate.length > 0) {\n                    item.hasjoin = '已报名' \n                } else if (start < nowd && nowd < end) {\n                    item.hasjoin = '进行中';\n                }\n            } else {\n                let start = Number(new Date(item.startDate));\n                let nowd = Number(new Date());\n                let end = Number(new Date(item.endDate));\n\n                if (start < nowd && nowd < end) {\n                    item.hasjoin = '进行中';\n                } else if (end < nowd) {\n                    item.hasjoin = '已完成'\n                } else {\n                    item.hasjoin = '未开始';\n                }\n            } \n            item.needSchoolRangName = await this.model('school').getSchoolNameByIds(item.needSchoolRang);\n            item.shstate = await this.model('activity').getstate(item.activityID);\n            arrdata.push(item);\n        }\n        data.data = arrdata;\n\n        return this.success(data)\n    }\n\n    async getactivitydetailAction() {\n        const id = this.get('id');\n        const studentid = this.get('studentid');\n        const model = this.model('activity');\n        model._pk = 'activityID';\n        const data = await model.where({activityID: id}).find();\n        if (!think.isEmpty(data)) {\n            data.pics = await this.model('activity').getPicsbyid(data.activityID);\n            // data.discussList = await this.model('discuss').getDiscussById(id,1);\n            data.shstate = await this.model('activity').getstate(data.activityID);\n            let joindate = await this.model('student_activity').getStudentIsJoinActivity(studentid,data.activityID);\n            let start = Number(new Date(data.startDate));\n            let nowd = Number(new Date());\n            let end = Number(new Date(data.endDate));\n                \n            if (nowd > end && joindate && joindate.length > 0) {\n                data.hasjoin = '已完成'\n            } else if(joindate && joindate.length > 0) {\n                data.hasjoin = '已报名' \n            } else if (start < nowd && nowd < end) {\n                data.hasjoin = '进行中';\n            }\n        }\n        return this.success(data);\n    }\n\n    async getactivitydetailForGroupAction() {\n        const id = this.get('id');\n        const studentid = this.get('studentid');\n        const model = this.model('activity');\n        model._pk = 'activityID';\n        const data = await model.where({activityID: id}).find();\n        if (!think.isEmpty(data)) {\n            data.pics = await this.model('activity').getPicsbyid(data.activityID);\n            // data.discussList = await this.model('discuss').getDiscussById(id,1);\n            data.shstate = await this.model('activity').getstate(data.activityID);\n            let joindate = await this.model('student_activity').getStudentIsJoinActivity(studentid,data.activityID);\n            let start = Number(new Date(data.startDate));\n            let nowd = Number(new Date());\n            let end = Number(new Date(data.endDate));\n\n            if (nowd > end && joindate && joindate.length > 0) {\n                data.hasjoin = '已完成'\n            } else if(joindate && joindate.length > 0) {\n                data.hasjoin = '已报名' \n            } else if (start < nowd && nowd < end) {\n                data.hasjoin = '进行中';\n            }\n            data.group=await this.model('group').where({activityid:data.activityID}).select();\n        }\n        return this.success(data);\n    }\n\n    async getActivityDiscussListAction() {\n        const id = this.get('id');\n        const model = this.model('activity');\n        model._pk = 'activityID';\n        const data = await model.where({activityID: id}).find();\n        if (!think.isEmpty(data)) {\n            data.discussList = await this.model('discuss').getDiscussById(id,1);\n            \n        }\n        return this.success(data);\n    }\n\n    async getActivitySceneryListAction() {\n        const studentid = this.get('studentid');\n        const model =  this.model('activity_scenery');\n        const pageindex = this.get('pageindex') || 1;\n        const pagesize = this.get('pagesize') || 5;\n        const activityid = this.get('activityid');\n        const idcondition = activityid ? 'a.activityID=' + activityid : '1=1';\n        const start = (pageindex -1) * pagesize;\n        const data = await model.query(\"select s.*,a.activityName,a.startSceneryid,a.endSceneryid,sc.schoolid,sc.address,sc.shdesc,sc.longitude,sc.latitude,sc.sctype,sc.shstate,sc.sceneryTitle from culture_activity_scenery as s left join culture_activity a on a.activityID=s.activityid left join culture_scenery sc on s.sceneryid=sc.sceneryID where \"+idcondition+\" and a.activityID limit \"+start+\",\"+pagesize+\" \");\n        const counta = await model.query(\"select count(*) t from (select s.*,a.activityName,a.startSceneryid,a.endSceneryid,sc.schoolid,sc.address,sc.shdesc,sc.longitude,sc.latitude,sc.sctype,sc.shstate,sc.sceneryTitle from culture_activity_scenery as s left join culture_activity a on a.activityID=s.activityid left join culture_scenery sc on s.sceneryid=sc.sceneryID where \"+idcondition+\" ) t\");\n        const pagecount = Math.ceil(counta[0].t / pagesize);\n\n        const arrdata = [];\n        let arrScen = [];\n        let arrSchool = []\n        for (const item of data) {\n            item.pics = await this.model('activity').getPicsbyid(item.activityid);\n            item.shstate = await this.model('activity').getstate(item.activityid);\n            arrScen.push(item.sceneryid);\n            arrSchool.push(item.schoolid)\n            // item.question = await this.model('student_activity').studentJoinActivityAndAnswer(studentid,item.activityID,item.questionid)\n            arrdata.push(item)\n        }\n        let complateSceneryNum = 0;\n        let complateSchoolNum = 0;\n        if (!think.isEmpty(studentid)) {\n            complateSceneryNum = await this.model('attention_activity').where({studentid:studentid,activityid:activityid}).count();\n            complateSchoolNum = await this.model('student_school').where({studentid:studentid,shstate:1}).count();\n        } else {\n             complateSceneryNum = await this.model('attention_activity').where({activityid:activityid}).count();\n             complateSchoolNum = await this.model('student_school').where({shstate:1}).count();\n        }\n        arrScen = _.uniq(arrScen);\n        arrSchool = _.uniq(arrSchool);\n        \n        data.data = arrdata;\n        return this.success({counta:counta[0].t,pagecount:pagecount,pageindex:pageindex,pagesize:pagesize,totalScenery:arrScen,totalSchool:arrSchool,complateSceneryNum:complateSceneryNum,complateSchoolNum:complateSchoolNum,data})\n    }\n\n    async listAction() {\n        const page = this.get('pageindex') || 1;\n        const size = this.get('pagesize') || 10;\n        let userinfo = await this.cache('userinfo');\n        console.log('session',userinfo)\n\n        const studentid = this.get('studentid');\n        const model = this.model('activity');\n        model._pk = 'activityID';\n        const endDate = new Date();\n        let date = endDate.getFullYear()+'-'+(endDate.getMonth()+1)+'-'+endDate.getDate()+' 00:00:00';\n        // date = '2019-04-14 00:00:00';\n        // console.log('list', date)\n        let data = {};\n        if (userinfo && userinfo[0].usertype == 0) {\n            data = await model.where({shstate: 0, endDate:{'>': think.datetime(date,'YYYY-MM-DD')}, createbyuserid: userinfo[0].sysUserID}).order('activityID desc').page(page,size).countSelect();\n        } else {\n            data = await model.where({shstate: 0, endDate:{'>': think.datetime(date,'YYYY-MM-DD')}}).page(page,size).order('activityID desc').countSelect();\n        }\n        \n        const arrdata = [];\n\n        for (const item of data.data) {\n            item.pics = await this.model('activity').getPicsbyid(item.activityID);\n            item.sceneryCount = await this.model('activity_scenery').where({activityid:item.activityID}).count('activityid');\n            item.questionCount = 1; //await this.model('question').where({activityid:item.activityID}).count('activityid');\n            // console.log(Number(new Date(item.startDate)), Number(new Date()), Number(new Date(item.endDate)))\n        \n            item.needSchoolRangName = await this.model('school').getSchoolNameByIds(item.needSchoolRang);\n            item.sceneryRange = await this.model('activity_scenery').getsceneryrangebyid(item.activityID);\n            // item.shstate = await this.model('activity').getstate(item.activityID);\n            arrdata.push(item);\n        }\n        data.data = arrdata;\n\n        return this.success(data)\n    }\n\n    async list2Action() {\n        const page = this.get('pageindex') || 1;\n        const size = this.get('pagesize') || 10;\n        let userinfo = await this.cache('userinfo');\n        const activityid = this.get('activityid');\n\n\n        const model = this.model('question');\n        model._pk = 'questionID';\n        let list = [];\n        if (userinfo && userinfo[0] && userinfo[0].usertype == 0) {\n            console.log('aaa')\n            let condition = {};\n            if (think.isEmpty(activityid)|| activityid == 'undefined') {\n                condition = {createbyuserid: userinfo[0].sysUserID};\n            } else {\n                condition = {'s.activityid':activityid,createbyuserid: userinfo[0].sysUserID};\n            }\n            list = await model.field(['q.questionID','q.questiontitle','q.answera','q.answerb','q.answerc','q.answerd','q.rightanswer',\n                's.sceneryid','s.activityid','cs.sceneryTitle','act.startAddress'])\n            .alias('q')\n            .join({\n                table:'activity_scenery',\n                join:'left',\n                as: 's',\n                on: ['q.questionID', 's.questionID']\n            })\n            .join({\n                table:'scenery',\n                join: 'left',\n                as: 'cs',\n                on: ['cs.sceneryid','s.sceneryid']\n            })\n            .join({\n                table:'activity',\n                join:'left',\n                as: 'act',\n                on: ['act.activityID','s.activityid']\n            }).order('activityid desc').where(condition).page(page, size).countSelect();\n        } else {\n            console.log('bbb')\n            let condition = {};\n            if (think.isEmpty(activityid) || activityid == 'undefined') {\n                condition = {1: 1};\n            } else {\n                condition['s.activityid'] = activityid;\n            }\n            list = await model.field(['q.questionID','q.questiontitle','q.answera','q.answerb','q.answerc','q.answerd','q.rightanswer',\n                's.sceneryid','s.activityid','cs.sceneryTitle','act.startAddress'])\n            .alias('q')\n            .join({\n                table:'activity_scenery',\n                join:'left',\n                as: 's',\n                on: ['q.questionID', 's.questionID']\n            })\n            .join({\n                table:'scenery',\n                join: 'left',\n                as: 'cs',\n                on: ['cs.sceneryid','s.sceneryid']\n            })\n            .join({\n                table:'activity',\n                join:'left',\n                as: 'act',\n                on: ['act.activityID','s.activityid']\n            }).where(condition).order('activityid desc').page(page, size).countSelect();\n        }\n        \n        return this.success(list)\n    }\n\n    async getActivityQuestionDetailAction() {\n        const questionid = this.get('questionid');\n        const activityid = this.get('activityid');\n        const model = this.model('question');\n        // model._pk = 'questionID';\n\n        let data =  await model.field(['q.questionID','q.questiontitle','q.answera','q.answerb','q.answerc','q.answerd','q.rightanswer',\n        's.sceneryid','s.activityid','cs.sceneryTitle','act.startAddress'])\n        .alias('q')\n        .join({\n            table:'activity_scenery',\n            join:'left',\n            as: 's',\n            on: ['q.questionID', 's.questionID']\n        })\n        .join({\n            table:'scenery',\n            join: 'left',\n            as: 'cs',\n            on: ['cs.sceneryid','s.sceneryid']\n        })\n        .join({\n            table:'activity',\n            join:'left',\n            as: 'act',\n            on: ['act.activityID','s.activityid']\n        }).where({'q.questionID': questionid, 's.activityid': activityid}).find();\n        return this.success(data)\n    }\n\n    \n}"
    ]
}