{
    "version": 3,
    "sources": [
        "../../../src/api/controller/myself.js"
    ],
    "names": [
        "Base",
        "require",
        "_",
        "module",
        "exports",
        "getMyallAction",
        "id",
        "get",
        "shstate",
        "data",
        "model",
        "query",
        "success",
        "getMyAttentionAction",
        "pageindex",
        "pagesize",
        "start",
        "_pk",
        "counta",
        "pagecount",
        "Math",
        "ceil",
        "t",
        "arrdata",
        "item",
        "pics",
        "getPicsbyid",
        "sceneryid",
        "getstate",
        "push",
        "getMyActivityListAction",
        "studentid",
        "hasjoin",
        "dataAttendtionIds",
        "field",
        "where",
        "getField",
        "think",
        "isEmpty",
        "uniq",
        "arrActs",
        "i",
        "length",
        "actData",
        "activityID",
        "find",
        "needschoolpass",
        "needscenerypass",
        "isgroup",
        "needSchoolPass",
        "needSceneryPass",
        "isGroup",
        "realattentscenery",
        "dataScenery",
        "activityid",
        "dataschool",
        "join",
        "sceneryID",
        "iscomplate",
        "joindate",
        "getStudentIsJoinGroup",
        "console",
        "log",
        "acModel",
        "arr",
        "order",
        "page",
        "countSelect",
        "isAttentention",
        "databmids",
        "studentID",
        "difference",
        "getMyDiscussAction",
        "getMySceneryAction"
    ],
    "mappings": "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",
    "file": "../../../src/api/controller/myself.js",
    "sourcesContent": [
        "const Base = require('./base.js');\nconst _ = require('lodash');\n\nmodule.exports = class extends Base {\n    async getMyallAction() {\n        const id = this.get('studentid');\n        const shstate = this.get('shstate');\n        const data = await this.model('student_activity').query(\"select count(studentID) as attentionActivityTimes,(select count(studentID) as attentions from culture_student_activity where studentid=\"+id+\" and shstate=\"+shstate+\") attentionSceneryTimes, (select count(studentid) as attent from culture_discuss where studentid=\"+id+\") attentionDiscuss from culture_student_scenery where studentid=\"+id+\" and shstate=\"+shstate+\"\")\n        return this.success(data)\n    }\n\n    async getMyAttentionAction() {\n        const id = this.get('studentid');\n        const pageindex = this.get('pageindex') || 1;\n        const pagesize = this.get('pagesize') || 5;\n        const start = (pageindex -1) * pagesize;\n        const model =  this.model('student');\n        model._pk = \"studentID\";\n\n        const data = await model.query(\"select ssc.*, sc.schoolid,sc.longitude,sc.latitude,sc.sceneryTitle from culture_student_scenery ssc left join culture_scenery sc on ssc.sceneryid=sc.sceneryID where ssc.shstate=1 and ssc.studentid=\"+id+\" limit \"+start+\",\"+pagesize+\"\");\n        const counta = await model.query(\"select count(*) t from (select ssc.*, sc.schoolid,sc.longitude,sc.latitude,sc.sceneryTitle from culture_student_scenery ssc left join culture_scenery sc on ssc.sceneryid=sc.sceneryID where ssc.shstate=1 and ssc.studentid=\"+id+\" ) t\");\n        const pagecount = Math.ceil(counta[0].t / pagesize);\n\n        const arrdata = [];\n        for (const item of data) {\n            item.pics = await this.model('scenery').getPicsbyid(item.sceneryid);\n            item.shstate = await this.model('scenery').getstate(item.sceneryid);\n            arrdata.push(item);\n        }\n        data.data = arrdata;\n\n        return this.success({counta:counta[0].t,pagecount:pagecount,pageindex:pageindex,pagesize:pagesize,data})\n    }\n\n    async getMyActivityListAction() {\n        const studentid = this.get('studentid');\n        const pageindex = this.get('pageindex') || 1;\n        const pagesize = this.get('pagesize') || 5;\n        const hasjoin = this.get('hasjoin');\n\n        const start = (pageindex -1) * pagesize;\n        const model =  this.model('student');\n        model._pk = \"studentID\";\n        let data = null;\n        let counta = null;\n\n        // 参加了哪些活动\n        let dataAttendtionIds = await this.model('attention_activity').field('activityid').where({studentid: studentid}).getField('activityid')\n        if (!think.isEmpty(dataAttendtionIds)) {\n            dataAttendtionIds = _.uniq(dataAttendtionIds)\n        }\n        // 取景点阀值\n        let arrActs = [];\n        if (!think.isEmpty(dataAttendtionIds)) {\n            for (let i = 0; i < dataAttendtionIds.length; i++) {\n                let actData = await this.model('activity').field(['activityID','needSchoolPass','needSceneryPass', 'isGroup']).where({activityID: dataAttendtionIds[i]}).find();\n                let needschoolpass = 0;\n                let needscenerypass = 0;\n                let isgroup = 0;\n                if (!think.isEmpty(actData)) {\n                    needschoolpass = actData.needSchoolPass;\n                    needscenerypass = actData.needSceneryPass;\n                    isgroup = actData.isGroup;\n                }\n\n                // 活动景点签到次数\n                let realattentscenery = 0; \n                let dataScenery = await this.model('attention_activity').field('sceneryid').where({studentid:studentid,activityid:dataAttendtionIds[i]}).getField('sceneryid');\n                if (!think.isEmpty(dataScenery)) {\n                    realattentscenery = dataScenery.length;\n                }\n\n                dataScenery = _.uniq(dataScenery)\n                // 景点所属学校\n                let dataschool = 0;\n                if (!think.isEmpty(dataScenery)) {\n                    dataScenery = dataScenery.join(',');\n                    dataschool = await this.model('scenery').field('schoolid').where({sceneryID: ['in', dataScenery]}).getField('schoolid');\n                    dataschool = _.uniq(dataschool)\n                    // console.log('schoolid------',dataschool)\n                }\n\n                let iscomplate = false;\n                if (isgroup == 0) { // 个人活动\n                    if (realattentscenery >= needscenerypass && dataschool && dataschool.length >= needschoolpass) {\n                        iscomplate = true;\n                    }\n                } else {\n                    let joindate = await this.model('student_activity').getStudentIsJoinGroup(studentid,dataAttendtionIds[i], 1);\n                    if ((joindate && joindate.iscomplate)) {\n                        iscomplate = true;\n                    }\n                }\n\n                arrActs.push({activityid: dataAttendtionIds[i], iscomplate});\n            }\n        }\nconsole.log('arr--------', arrActs, dataAttendtionIds)\n\n        const acModel = this.model('activity');\n        acModel._pk = 'activityID';\n        let arr = [];\n        if (hasjoin == '进行中' && dataAttendtionIds && dataAttendtionIds.length > 0) {\n            data = await acModel.where('endDate > now() and now() > startDate and activityID in ('+dataAttendtionIds.join(',')+')').order('activityID desc').page(pageindex,pagesize).countSelect()\n        } else if (hasjoin == '已完成' && arrActs && arrActs.length > 0) {\n            \n            for (let i = 0; i < arrActs.length; i++) {\n                if (arrActs[i].isAttentention && arrActs[i].iscomplate) {\n                    arr.push(arrActs[i].activityid)\n                }\n            }\n            if (arr && arr.length > 0) {\n                data = await acModel.where('activityID in ('+arr.join(',')+')').order('activityID desc').page(pageindex,pagesize).countSelect();\n            }\n        } else if (hasjoin == '已报名') {\n            let databmids = await this.model('student_activity').field('activityid').where({studentID: studentid,shstate:1}).getField('activityid');\n            databmids = _.uniq(databmids);\n            databmids = _.difference(databmids,arr);\n            if (databmids && databmids.length > 0) {\n                data = await acModel.where('activityID in ('+databmids.join(',')+')').order('activityID desc').page(pageindex,pagesize).countSelect();\n            }\n        }\n\n        const arrdata = [];\n        if (!think.isEmpty(data)) {\n            for (const item of data.data) {\n                item.pics = await this.model('activity').getPicsbyid(item.activityID);\n                item.shstate = await this.model('activity').getstate(item.activityID);\n                arrdata.push(item);\n            }\n            data.data = arrdata;\n        }\n        // return this.success({counta:counta[0].t,pagecount:pagecount,pageindex:pageindex,pagesize:pagesize,data})\n\n        return this.success(data)\n    }\n\n    async getMyDiscussAction() {\n        const studentid = this.get('studentid');\n        const pageindex = this.get('pageindex') || 1;\n        const pagesize = this.get('pagesize') || 5;\n\n        const model = this.model('discuss')\n        model._pk=\"discussID\";\n        const data = await model.where({studentid: studentid, shstate:1}).order('discussID desc').page(pageindex, pagesize).countSelect();\n        return this.success(data)\n    }\n\n    async getMySceneryAction() {\n        const studentid = this.get('studentid');\n        const model = this.model('student_scenery');\n        let data = null;\n        if (!think.isEmpty(studentid)) {\n            data = await model.query(\"select ss.*,s.sceneryTitle,s.shdesc,s.sctype from culture_student_scenery ss left join culture_scenery s on ss.sceneryid=s.sceneryid where s.shstate=0 and ss.studentid=\"+studentid+\" and ss.shstate=1 and ss.sceneryid not in (select targetid from culture_discuss where distype=0 and studentid=\"+studentid+\")\");\n        } else {\n            data = await model.query(\"select ss.*,s.sceneryTitle,s.shdesc,s.sctype from culture_student_scenery ss left join culture_scenery s on ss.sceneryid=s.sceneryid where s.shstate=0 and ss.shstate=1 and ss.sceneryid not in (select targetid from culture_discuss where distype=0)\");\n        }\n            const arrdata = [];\n        for (const item of data) {\n            item.pics = await this.model('scenery').getPicsbyid(item.sceneryid);\n            item.shstate = await this.model('scenery').getstate(item.sceneryid);\n            arrdata.push(item);\n        }\n        data.data = arrdata;\n        return this.success(data);\n    }\n}"
    ]
}